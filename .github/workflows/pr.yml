name: CI - Tests and Checks

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  # FIXME delete this job.
  test-ci:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v2

      - uses: nixbuild/nix-quick-install-action@v29

      - name: Grant write permissions to nix directories
        run: |
          # We need to grant ourselves write privileges to the Nix directories
          # for `actions/cache` to work:
          chmod --recursive u+w /nix || true 
          chmod --recursive u+w ~/.cache/nix || true 
          chmod --recursive u+w ~root/.cache/nix || true

      - uses: actions/cache@v4
        with:
          key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix') }}
          restore-keys: |
            nix-${{ runner.os }}-
          path: |
            /nix
            ~/.cache/nix
            ~root/.cache/nix

      - name: Revoke write permissions to nix directories
        run: |
          chmod --recursive u-w /nix || true 
          chmod --recursive u-w ~/.cache/nix || true 
          chmod --recursive u-w ~root/.cache/nix || true

      # - name: Restore and cache Nix store
      #   uses: nix-community/cache-nix-action@v5
      #   with:
      #     # restore and save a cache using this key
      #     primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix') }}
      #     # if there's no cache hit, restore a cache by this prefix
      #     restore-prefixes-first-match: nix-${{ runner.os }}-
      #     # collect garbage until Nix store size (in bytes) is at most this number
      #     # before trying to save a new cache
      #     gc-max-store-size-linux: 1073741824 # == 1GiB
      #     # do purge caches
      #     purge: true
      #     # purge all versions of the cache
      #     purge-prefixes: cache-${{ runner.os }}-
      #     # created more than this number of seconds ago relative to the start of the `Post Restore` phase
      #     purge-created: 0
      #     # except the version with the `primary-key`, if it exists
      #     purge-primary-key: never
      #     # When true, the action can do Nix-specific things.
      #     # NOTE: I'm trying setting it false to see if it can speed up the
      #     # process.
      #     nix: false

      - name: Install packages from Nix development environment
        run: nix develop --command true

      - name: Install Node dependencies
        run: nix develop --command -- pnpm install --frozen-lockfile

      - name: Run tests
        run: nix develop --command -- pnpm run test

      - name: Run linter
        # Bun does not yet support ESlint.
        run: "nix develop --command -- pnpm run check:lint"

      - name: Check formatting
        run: "nix develop --command -- pnpm run check:format"
